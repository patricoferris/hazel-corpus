let length_aux : forall a -> Int -> [a] -> Int = typfun a -> fun len -> fun x37 -> case x37 
  | [] => len
  | _ :: l => length_aux@<a>(len + 1)(l)
end in let length : forall a -> [a] -> Int = typfun a -> fun l -> length_aux@<a>(0)(l) in let cons : forall a -> a -> [a] -> [a] = typfun a -> fun a -> fun l -> a :: l in let singleton : forall a -> a -> [a] = typfun a -> fun a -> [a] in let hd : forall a -> [a] -> a = typfun a -> fun x36 -> case x36 
  | [] => failwith("hd")
  | a :: _ => a
end in let tl : forall a -> [a] -> [a] = typfun a -> fun x35 -> case x35 
  | [] => failwith("tl")
  | _ :: l => l
end in let nth : forall a -> [a] -> Int -> a = typfun a -> fun l -> fun n -> if n < 0 then invalid_arg("List.nth") else let nth_aux = fun l -> fun n -> case l 
  | [] => failwith("nth")
  | a :: l => if n == 0 then a else nth_aux(l)(n - 1)
end in nth_aux(l)(n) in let nth_opt = fun l -> fun n -> if n < 0 then invalid_arg("List.nth") else let nth_aux = fun l -> fun n -> case l 
  | [] => None
  | a :: l => if n == 0 then Some(a) else nth_aux(l)(n - 1)
end in nth_aux(l)(n) in let append : forall a -> [a] -> [a] -> [a] = @ in let rev_append : forall a -> [a] -> [a] -> [a] = typfun a -> fun l1 -> fun l2 -> case l1 
  | [] => l2
  | a :: l => rev_append@<a>(l)(a :: l2)
end in let rev : forall a -> [a] -> [a] = typfun a -> fun l -> rev_append@<a>(l)([]) in let init : forall a -> Int -> Int -> (Int -> a) -> [a] = typfun a -> fun i -> fun last -> fun f -> if i > last then [] else if i == last then [f(i)] else let r1 = f(i) in let r2 = f(i + 1) in r1 :: r2 :: init@<a>(i + 2)(last)(f) in let init : forall a -> Int -> Int -> (Int -> a) -> [a] = typfun a -> fun len -> fun f -> if len < 0 then invalid_arg("List.init") else init@<a>(0)(len - 1)(f) in let flatten : forall a -> [[a]] -> [a] = typfun a -> fun x34 -> case x34 
  | [] => []
  | l :: r => @(l)(flatten@<a>(r))
end in let concat : forall a -> [[a]] -> [a] = flatten in let map : forall a -> forall b -> (a -> b) -> [a] -> [b] = typfun a -> typfun b -> fun f -> fun x33 -> case x33 
  | [] => []
  | [a1] => let r1 = f(a1) in [r1]
  | a1 :: a2 :: l =>
      let r1 = f(a1) in let r2 = f(a2) in r1 :: r2 :: map@<a>@<b>(f)(l)
end in let mapi : forall a -> forall b -> Int -> (Int -> a -> b) -> [a] -> [b] = typfun a -> typfun b -> fun i -> fun f -> fun x32 -> case x32 
  | [] => []
  | [a1] => let r1 = f(i)(a1) in [r1]
  | a1 :: a2 :: l =>
      let r1 = f(i)(a1) in let r2 = f(i + 1)(a2) in r1 :: r2 :: mapi@<a>@<b>(i + 2)(f)(l)
end in let mapi : forall a -> forall b -> Int -> (Int -> a -> b) -> [a] -> [b] = typfun a -> typfun b -> fun f -> fun l -> mapi@<a>@<b>(0)(f)(l) in let rev_map : forall a -> forall b -> (a -> b) -> [a] -> [b] = typfun a -> typfun b -> fun f -> fun l -> let rmap_f = fun accu -> fun x31 -> case x31 
  | [] => accu
  | a :: l => rmap_f(f(a) :: accu)(l)
end in rmap_f([])(l) in let iter : forall a -> forall b -> (a -> b) -> [a] -> unit = typfun a -> typfun b -> fun f -> fun x30 -> case x30 
  | [] => ()
  | a :: l => ?
end in let iteri : forall a -> forall b -> Int -> (Int -> a -> b) -> [a] -> unit = typfun a -> typfun b -> fun i -> fun f -> fun x29 -> case x29 
  | [] => ()
  | a :: l => ?
end in let iteri : forall a -> forall b -> Int -> (Int -> a -> b) -> [a] -> unit = typfun a -> typfun b -> fun f -> fun l -> iteri@<a>@<b>(0)(f)(l) in let fold_left : forall a -> forall b -> (a -> b -> a) -> a -> [b] -> a = typfun a -> typfun b -> fun f -> fun accu -> fun l -> case l 
  | [] => accu
  | a :: l => fold_left@<a>@<b>(f)(f(accu)(a))(l)
end in let fold_right : forall a -> forall b -> (a -> b -> b) -> [a] -> b -> b = typfun a -> typfun b -> fun f -> fun l -> fun accu -> case l 
  | [] => accu
  | a :: l => f(a)(fold_right@<a>@<b>(f)(l)(accu))
end in let map2 : forall a -> forall b -> forall c -> (a -> b -> c) -> [a] -> [b] -> [c] = typfun a -> typfun b -> typfun c -> fun f -> fun l1 -> fun l2 -> case (l1, l2) 
  | ([], []) => []
  | ([a1], [b1]) => let r1 = f(a1)(b1) in [r1]
  | (a1 :: a2 :: l1, b1 :: b2 :: l2) =>
      let r1 = f(a1)(b1) in let r2 = f(a2)(b2) in r1 :: r2 :: map2@<a>@<b>@<c>(f)(l1)(l2)
  | (_, _) => invalid_arg("List.map2")
end in let rev_map2 : forall a -> forall b -> forall c -> (a -> b -> c) -> [a] -> [b] -> [c] = typfun a -> typfun b -> typfun c -> fun f -> fun l1 -> fun l2 -> let rmap2_f = fun accu -> fun l1 -> fun l2 -> case (l1, l2) 
  | ([], []) => accu
  | (a1 :: l1, a2 :: l2) => rmap2_f(f(a1)(a2) :: accu)(l1)(l2)
  | (_, _) => invalid_arg("List.rev_map2")
end in rmap2_f([])(l1)(l2) in let iter2 : forall a -> forall b -> forall c -> (a -> b -> c) -> [a] -> [b] -> unit = typfun a -> typfun b -> typfun c -> fun f -> fun l1 -> fun l2 -> case (l1, l2) 
  | ([], []) => ()
  | (a1 :: l1, a2 :: l2) => ?
  | (_, _) => invalid_arg("List.iter2")
end in let fold_left2 : forall a -> forall b -> forall c -> (a -> b -> c -> a) -> a -> [b] -> [c] -> a = typfun a -> typfun b -> typfun c -> fun f -> fun accu -> fun l1 -> fun l2 -> case (l1, l2) 
  | ([], []) => accu
  | (a1 :: l1, a2 :: l2) =>
      fold_left2@<a>@<b>@<c>(f)(f(accu)(a1)(a2))(l1)(l2)
  | (_, _) => invalid_arg("List.fold_left2")
end in let fold_right2 : forall a -> forall b -> forall c -> (a -> b -> c -> c) -> [a] -> [b] -> c -> c = typfun a -> typfun b -> typfun c -> fun f -> fun l1 -> fun l2 -> fun accu -> case (l1, l2) 
  | ([], []) => accu
  | (a1 :: l1, a2 :: l2) =>
      f(a1)(a2)(fold_right2@<a>@<b>@<c>(f)(l1)(l2)(accu))
  | (_, _) => invalid_arg("List.fold_right2")
end in let for_all : forall a -> (a -> Bool) -> [a] -> Bool = typfun a -> fun p -> fun x28 -> case x28 
  | [] => true
  | a :: l => &&(p(a))(for_all@<a>(p)(l))
end in let exists : forall a -> (a -> Bool) -> [a] -> Bool = typfun a -> fun p -> fun x27 -> case x27 
  | [] => false
  | a :: l => ||(p(a))(exists@<a>(p)(l))
end in let for_all2 : forall a -> forall b -> (a -> b -> Bool) -> [a] -> [b] -> Bool = typfun a -> typfun b -> fun p -> fun l1 -> fun l2 -> case (l1, l2) 
  | ([], []) => true
  | (a1 :: l1, a2 :: l2) => &&(p(a1)(a2))(for_all2@<a>@<b>(p)(l1)(l2))
  | (_, _) => invalid_arg("List.for_all2")
end in let exists2 : forall a -> forall b -> (a -> b -> Bool) -> [a] -> [b] -> Bool = typfun a -> typfun b -> fun p -> fun l1 -> fun l2 -> case (l1, l2) 
  | ([], []) => false
  | (a1 :: l1, a2 :: l2) => ||(p(a1)(a2))(exists2@<a>@<b>(p)(l1)(l2))
  | (_, _) => invalid_arg("List.exists2")
end in let mem : forall a -> a -> [a] -> Bool = typfun a -> fun x -> fun x26 -> case x26 
  | [] => false
  | a :: l => ||(compare@<a>@<b>(a)(x) == 0)(mem@<a>(x)(l))
end in let memq : forall a -> a -> [a] -> Bool = typfun a -> fun x -> fun x25 -> case x25 
  | [] => false
  | a :: l => ||(==(a)(x))(memq@<a>(x)(l))
end in let assoc : forall b -> a -> [?] -> b = typfun b -> fun x -> fun x24 -> case x24 
  | [] => raise(Not_found)
  | (a, b) :: l => if compare@<a>@<b>(a)(x) == 0 then b else assoc@<b>(x)(l)
end in let assoc_opt = fun x -> fun x23 -> case x23 
  | [] => None
  | (a, b) :: l =>
      if compare@<a>@<b>(a)(x) == 0 then Some(b) else assoc_opt@<b>(x)(l)
end in let assq : forall b -> a -> [?] -> b = typfun b -> fun x -> fun x22 -> case x22 
  | [] => raise(Not_found)
  | (a, b) :: l => if ==(a)(x) then b else assq@<b>(x)(l)
end in let assq_opt = fun x -> fun x21 -> case x21 
  | [] => None
  | (a, b) :: l => if ==(a)(x) then Some(b) else assq_opt@<b>(x)(l)
end in let mem_assoc : a -> [?] -> Bool = fun x -> fun x20 -> case x20 
  | [] => false
  | (a, _) :: l => ||(compare@<a>@<b>(a)(x) == 0)(mem_assoc(x)(l))
end in let mem_assq : a -> [?] -> Bool = fun x -> fun x19 -> case x19 
  | [] => false
  | (a, _) :: l => ||(==(a)(x))(mem_assq(x)(l))
end in let remove_assoc : a -> [?] -> [?] = fun x -> fun x18 -> case x18 
  | [] => []
  | ? :: l =>
      if compare@<a>@<b>(a)(x) == 0 then l else pair :: remove_assoc(x)(l)
end in let remove_assq : a -> [?] -> [?] = fun x -> fun x17 -> case x17 
  | [] => []
  | ? :: l => if ==(a)(x) then l else pair :: remove_assq(x)(l)
end in let find : forall a -> (a -> Bool) -> [a] -> a = typfun a -> fun p -> fun x16 -> case x16 
  | [] => raise(Not_found)
  | x :: l => if p(x) then x else find@<a>(p)(l)
end in let find_opt = fun p -> fun x15 -> case x15 
  | [] => None
  | x :: l => if p(x) then Some(x) else find_opt@<a>(p)(l)
end in let find_index = fun p -> let aux = fun i -> fun x14 -> case x14 
  | [] => None
  | a :: l => if p(a) then Some(i) else aux(i + 1)(l)
end in aux(0) in let find_map = fun f -> fun x13 -> case x13 
  | [] => None
  | x :: l => case f(x) 
  | ? => result
  | None => find_map@<a>@<b>(f)(l)
end
end in let find_mapi = fun f -> let aux = fun i -> fun x12 -> case x12 
  | [] => None
  | x :: l => case f(i)(x) 
  | ? => result
  | None => aux(i + 1)(l)
end
end in aux(0) in let find_all : forall a -> (a -> Bool) -> [a] -> [a] = typfun a -> fun p -> fun x11 -> case x11 
  | [] => []
  | x :: l => if p(x) then x :: find_all@<a>(p)(l) else find_all@<a>(p)(l)
end in let filter : forall a -> (a -> Bool) -> [a] -> [a] = find_all in let filteri : forall a -> (Int -> a -> Bool) -> Int -> [a] -> [a] = typfun a -> fun p -> fun i -> fun x10 -> case x10 
  | [] => []
  | x :: l =>
      let i' = i + 1 in if p(i)(x) then x :: filteri@<a>(p)(i')(l) else filteri@<a>(p)(i')(l)
end in let filteri : forall a -> (Int -> a -> Bool) -> Int -> [a] -> [a] = typfun a -> fun p -> fun l -> filteri@<a>(p)(0)(l) in let filter_map = fun f -> fun x9 -> case x9 
  | [] => []
  | x :: l => case f(x) 
  | None => filter_map@<a>@<b>(f)(l)
  | Some(v) => v :: filter_map@<a>@<b>(f)(l)
end
end in let prepend_concat_map : forall a -> forall b -> [a] -> (b -> [a]) -> [b] -> [a] = typfun a -> typfun b -> fun ys -> fun f -> fun xs -> case ys 
  | [] => concat_map@<a>@<b>(f)(xs)
  | y :: ys => y :: prepend_concat_map@<a>@<b>(ys)(f)(xs)
end in let concat_map : forall a -> forall b -> (a -> [b]) -> [a] -> [b] = typfun a -> typfun b -> fun f -> fun x8 -> case x8 
  | [] => []
  | x :: xs => prepend_concat_map@<a>@<b>(f(x))(f)(xs)
end in let take : forall a -> Int -> [a] -> [a] = typfun a -> fun n -> fun l -> let aux = fun n -> fun l -> case (n, l) 
  | ? => []
  | (n, x :: l) => x :: aux(n - 1)(l)
end in ? in let drop : forall a -> Int -> [a] -> [a] = typfun a -> fun n -> fun l -> let aux = fun i -> fun x7 -> case x7 
  | _x :: l => aux(i + 1)(l)
  | rest => rest
end in ? in let take_while : forall a -> (a -> Bool) -> [a] -> [a] = typfun a -> fun p -> fun l -> let aux = fun x6 -> case x6 
  | x :: l => x :: aux(l)
  | _rest => []
end in aux(l) in let drop_while : forall a -> (a -> Bool) -> [a] -> [a] = typfun a -> fun p -> fun x5 -> case x5 
  | x :: l => drop_while@<a>(p)(l)
  | rest => rest
end in let fold_left_map : (a -> b -> ?) -> a -> [b] -> ? = fun f -> fun accu -> fun l -> let aux = fun accu -> fun l_accu -> fun x4 -> case x4 
  | [] => (accu, rev@<a>(l_accu))
  | x :: l => let (accu, x) = f(accu)(x) in aux(accu)(x :: l_accu)(l)
end in aux(accu)([])(l) in let partition : (a -> Bool) -> [a] -> ? = fun p -> fun l -> let part = fun yes -> fun no -> fun x3 -> case x3 
  | [] => (rev@<a>(yes), rev@<a>(no))
  | x :: l => if p(x) then part(x :: yes)(no)(l) else part(yes)(x :: no)(l)
end in part([])([])(l) in let split : [?] -> ? = fun x2 -> case x2 
  | [] => ([], [])
  | (x, y) :: l => let (rx, ry) = split(l) in (x :: rx, y :: ry)
end in let combine : [a] -> [b] -> [?] = fun l1 -> fun l2 -> case (l1, l2) 
  | ([], []) => []
  | (a1 :: l1, a2 :: l2) => (a1, a2) :: combine(l1)(l2)
  | (_, _) => invalid_arg("List.combine")
end in let merge : forall a -> (a -> a -> Int) -> [a] -> [a] -> [a] = typfun a -> fun cmp -> fun l1 -> fun l2 -> case (l1, l2) 
  | ([], l2) => l2
  | (l1, []) => l1
  | (h1 :: t1, h2 :: t2) =>
      if cmp(h1)(h2) <= 0 then h1 :: merge@<a>(cmp)(t1)(l2) else h2 :: merge@<a>(cmp)(l1)(t2)
end in let stable_sort : forall a -> (a -> a -> Int) -> [a] -> [a] = typfun a -> fun cmp -> fun l -> let rev_merge = fun l1 -> fun l2 -> fun accu -> case (l1, l2) 
  | ([], l2) => rev_append@<a>(l2)(accu)
  | (l1, []) => rev_append@<a>(l1)(accu)
  | (h1 :: t1, h2 :: t2) =>
      if cmp(h1)(h2) <= 0 then rev_merge(t1)(l2)(h1 :: accu) else rev_merge(l1)(t2)(h2 :: accu)
end in let rev_merge_rev = fun l1 -> fun l2 -> fun accu -> case (l1, l2) 
  | ([], l2) => rev_append@<a>(l2)(accu)
  | (l1, []) => rev_append@<a>(l1)(accu)
  | (h1 :: t1, h2 :: t2) =>
      if cmp(h1)(h2) > 0 then rev_merge_rev(t1)(l2)(h1 :: accu) else rev_merge_rev(l1)(t2)(h2 :: accu)
end in let rev_sort = fun n -> fun l -> case (n, l) 
  | (2, x1 :: x2 :: tl) =>
      let s = if cmp(x1)(x2) > 0 then x1 :: [x2] else x2 :: [x1] in (s, tl)
  | (3, x1 :: x2 :: x3 :: tl) =>
      let s = if cmp(x1)(x2) > 0 then if cmp(x2)(x3) > 0 then x1 :: x2 :: [x3] else if cmp(x1)(x3) > 0 then x1 :: x3 :: [x2] else x3 :: x1 :: [x2] else if cmp(x1)(x3) > 0 then x2 :: x1 :: [x3] else if cmp(x2)(x3) > 0 then x2 :: x3 :: [x1] else x3 :: x2 :: [x1] in (s, tl)
  | (n, l) =>
      let n1 = asr(n)(1) in let n2 = n - n1 in let (s1, l2) = sort@<a>(n1)(l) in let (s2, tl) = sort@<a>(n2)(l2) in (rev_merge(s1)(s2)([]), tl)
end in let sort = fun n -> fun l -> case (n, l) 
  | (2, x1 :: x2 :: tl) =>
      let s = if cmp(x1)(x2) <= 0 then x1 :: [x2] else x2 :: [x1] in (s, tl)
  | (3, x1 :: x2 :: x3 :: tl) =>
      let s = if cmp(x1)(x2) <= 0 then if cmp(x2)(x3) <= 0 then x1 :: x2 :: [x3] else if cmp(x1)(x3) <= 0 then x1 :: x3 :: [x2] else x3 :: x1 :: [x2] else if cmp(x1)(x3) <= 0 then x2 :: x1 :: [x3] else if cmp(x2)(x3) <= 0 then x2 :: x3 :: [x1] else x3 :: x2 :: [x1] in (s, tl)
  | (n, l) =>
      let n1 = asr(n)(1) in let n2 = n - n1 in let (s1, l2) = rev_sort(n1)(l) in let (s2, tl) = rev_sort(n2)(l2) in (rev_merge_rev(s1)(s2)([]), tl)
end in let len = length@<a>(l) in if len < 2 then l else fst(sort@<a>(len)(l)) in let sort : forall a -> (a -> a -> Int) -> [a] -> [a] = stable_sort in let fast_sort : forall a -> (a -> a -> Int) -> [a] -> [a] = stable_sort in let sort_uniq : forall a -> (a -> a -> Int) -> [a] -> [a] = typfun a -> fun cmp -> fun l -> let rev_merge = fun l1 -> fun l2 -> fun accu -> case (l1, l2) 
  | ([], l2) => rev_append@<a>(l2)(accu)
  | (l1, []) => rev_append@<a>(l1)(accu)
  | (h1 :: t1, h2 :: t2) =>
      let c = cmp(h1)(h2) in if c == 0 then rev_merge(t1)(t2)(h1 :: accu) else if c < 0 then rev_merge(t1)(l2)(h1 :: accu) else rev_merge(l1)(t2)(h2 :: accu)
end in let rev_merge_rev = fun l1 -> fun l2 -> fun accu -> case (l1, l2) 
  | ([], l2) => rev_append@<a>(l2)(accu)
  | (l1, []) => rev_append@<a>(l1)(accu)
  | (h1 :: t1, h2 :: t2) =>
      let c = cmp(h1)(h2) in if c == 0 then rev_merge_rev(t1)(t2)(h1 :: accu) else if c > 0 then rev_merge_rev(t1)(l2)(h1 :: accu) else rev_merge_rev(l1)(t2)(h2 :: accu)
end in let rev_sort = fun n -> fun l -> case (n, l) 
  | (2, x1 :: x2 :: tl) =>
      let s = let c = cmp(x1)(x2) in if c == 0 then [x1] else if c > 0 then x1 :: [x2] else x2 :: [x1] in (s, tl)
  | (3, x1 :: x2 :: x3 :: tl) =>
      let s = let c = cmp(x1)(x2) in if c == 0 then let c = cmp(x1)(x3) in if c == 0 then [x1] else if c > 0 then x1 :: [x3] else x3 :: [x1] else if c > 0 then let c = cmp(x2)(x3) in if c == 0 then x1 :: [x2] else if c > 0 then x1 :: x2 :: [x3] else let c = cmp(x1)(x3) in if c == 0 then x1 :: [x2] else if c > 0 then x1 :: x3 :: [x2] else x3 :: x1 :: [x2] else let c = cmp(x1)(x3) in if c == 0 then x2 :: [x1] else if c > 0 then x2 :: x1 :: [x3] else let c = cmp(x2)(x3) in if c == 0 then x2 :: [x1] else if c > 0 then x2 :: x3 :: [x1] else x3 :: x2 :: [x1] in (s, tl)
  | (n, l) =>
      let n1 = asr(n)(1) in let n2 = n - n1 in let (s1, l2) = sort@<a>(n1)(l) in let (s2, tl) = sort@<a>(n2)(l2) in (rev_merge(s1)(s2)([]), tl)
end in let sort = fun n -> fun l -> case (n, l) 
  | (2, x1 :: x2 :: tl) =>
      let s = let c = cmp(x1)(x2) in if c == 0 then [x1] else if c < 0 then x1 :: [x2] else x2 :: [x1] in (s, tl)
  | (3, x1 :: x2 :: x3 :: tl) =>
      let s = let c = cmp(x1)(x2) in if c == 0 then let c = cmp(x1)(x3) in if c == 0 then [x1] else if c < 0 then x1 :: [x3] else x3 :: [x1] else if c < 0 then let c = cmp(x2)(x3) in if c == 0 then x1 :: [x2] else if c < 0 then x1 :: x2 :: [x3] else let c = cmp(x1)(x3) in if c == 0 then x1 :: [x2] else if c < 0 then x1 :: x3 :: [x2] else x3 :: x1 :: [x2] else let c = cmp(x1)(x3) in if c == 0 then x2 :: [x1] else if c < 0 then x2 :: x1 :: [x3] else let c = cmp(x2)(x3) in if c == 0 then x2 :: [x1] else if c < 0 then x2 :: x3 :: [x1] else x3 :: x2 :: [x1] in (s, tl)
  | (n, l) =>
      let n1 = asr(n)(1) in let n2 = n - n1 in let (s1, l2) = rev_sort(n1)(l) in let (s2, tl) = rev_sort(n2)(l2) in (rev_merge_rev(s1)(s2)([]), tl)
end in let len = length@<a>(l) in if len < 2 then l else fst(sort@<a>(len)(l)) in let compare_lengths : forall a -> forall b -> [a] -> [b] -> Int = typfun a -> typfun b -> fun l1 -> fun l2 -> case (l1, l2) 
  | ([], []) => 0
  | ([], _) => -1
  | (_, []) => 1
  | (_ :: l1, _ :: l2) => compare_lengths@<a>@<b>(l1)(l2)
end in let compare_length_with : forall a -> [a] -> Int -> Int = typfun a -> fun l -> fun n -> case l 
  | [] => if n == 0 then 0 else if n > 0 then -1 else 1
  | _ :: l => if n <= 0 then 1 else compare_length_with@<a>(l)(n - 1)
end in let is_empty : forall a -> [a] -> Bool = typfun a -> fun x1 -> case x1 
  | [] => true
  | _ :: _ => false
end in let equal : forall a -> forall b -> (a -> b -> Bool) -> [a] -> [b] -> Bool = typfun a -> typfun b -> fun eq -> fun l1 -> fun l2 -> case (l1, l2) 
  | ([], []) => true
  | ? => false
  | (a1 :: l1, a2 :: l2) => &&(eq(a1)(a2))(equal@<a>@<b>(eq)(l1)(l2))
end in let compare : forall a -> forall b -> (a -> b -> Int) -> [a] -> [b] -> Int = typfun a -> typfun b -> fun cmp -> fun l1 -> fun l2 -> case (l1, l2) 
  | ([], []) => 0
  | ([], _ :: _) => -1
  | (_ :: _, []) => 1
  | (a1 :: l1, a2 :: l2) =>
      let c = cmp(a1)(a2) in if c != 0 then c else compare@<a>@<b>(cmp)(l1)(l2)
end in ?