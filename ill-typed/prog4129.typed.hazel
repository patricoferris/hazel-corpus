type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
 in
let pi : Float = 4. *. atan(1.) in let eval : (expr, Float, Float) -> Float = fun (e, x, y) -> case e 
  | VarX(x) => x
  | VarY(y) => y
  | Sine(e) => sin(pi *. eval((e, x, y)))
  | Cosine(e) => cos(pi *. eval((e, x, y)))
  | Average(x, y) => eval((e, x, y)) +. eval((e, x, y)) /. 2.
  | Times(x, y) => eval((e, x, y)) *. eval((e, x, y))
  | Thresh(e1, e2, e3, e4) => failwith@<Float>("sad")
end in
?
