type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
  + Squares(expr)
  + Volume((expr, expr, expr))
 in
let pi : Float = 4. *. atan(1.) in let eval : (expr, Float, Float) -> Float = fun (e, x, y) -> case e 
  | VarX => x
  | VarY => y
  | Sine(e) => sin(pi *. eval((e, x, y)))
  | Cosine(e) => cos(pi *. eval((e, x, y)))
  | Average(a, b) => eval((a, x, y)) +. eval((b, x, y)) /. 2.
  | Times(a, b) => eval((a, x, y)) *. eval((b, x, y))
  | Thresh(a, b, c, d) =>
      if eval((a, x, y)) < eval((b, x, y)) then eval((c, x, y)) else eval((d, x, y))
  | Squares(e) => eval((e, x, y)) *. eval((e, x, y))
  | Substract(j, k) => eval((j, x, y)) -. eval((k, x, y))
end in
?
