let pi = *.(4.)(atan(1.)) in type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
  + Sqrt(expr)
  + Abs(expr)
  + Quad(expr, expr, expr)
 in type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
  + Sqrt(expr)
  + Abs(expr)
  + Gauss(expr, expr, expr)
 in let eval = fun (e, x, y) -> case e 
  | VarX => x
  | VarY => y
  | Sine(e') => sin(*.(pi)(eval((e', x, y))))
  | Cosine(e') => cos(*.(pi)(eval((e', x, y))))
  | Average(e1, e2) => /.(+.(eval((e1, x, y)))(eval((e2, x, y))))(2.)
  | Times(e1, e2) => *.(eval((e1, x, y)))(eval((e2, x, y)))
  | Thresh(e1, e2, e3, e4) =>
      if eval((e1, x, y)) < eval((e2, x, y)) then eval((e3, x, y)) else eval((e4, x, y))
  | Sqrt(e) => sqrt(abs_float(eval((e, x, y))))
  | Gauss(e1, e2, e3) =>
      -.(*.(2.)(exp(/.(-.(eval((e1, x, y)))(eval((e2, x, y))) ** 2.)(eval((e3, x, y))))))(1.)
  | _ => failwith("we are seriously writing a lisp compiler god save us all")
end in let _ = eval((Quad((VarX, VarY, VarX)), 0.5, 0.5)) in ?
