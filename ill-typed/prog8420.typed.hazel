type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
 in
let eval : (expr, Float, Float) -> Float = fun (e, x, y) -> let pi = 3.142 in case e 
  | VarX => x
  | VarY => y
  | Sine(v) => sin(pi *. eval((v, x, y)))
  | Cosine(v) => cos(pi *. eval((v, x, y)))
  | Average(v, w) => eval((v, x, y)) +. eval((w, x, y)) /. 2.
  | Times(v, w) => eval((v, x, y)) *. eval((w, x, y))
  | Thresh(v, w, q, r) =>
      if eval((v, x, y)) < eval((w, x, y)) then eval((q, x, y)) else eval((r, x, y))
  | Divide(v, w) => eval((v, x, y)) / eval((w, x, y))
  | Super(v, w) => eval((v, x, y)) + eval((w, x, y)) * eval((v, x, y))
end in
?
