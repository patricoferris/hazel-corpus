type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
 in
let buildAverage : (expr, expr) -> expr = fun (e1, e2) -> Average((e1, e2)) in 
let buildCosine : expr -> expr = fun e -> Cosine(e) in let buildSine : expr -> expr = fun e -> Sine(e) in
                                                       let buildThresh : (expr, expr, expr, expr) -> expr = fun (a, b, a_less, b_less) -> Thresh((a, b, a_less, b_less)) in
                                                       let buildTimes : (expr, expr) -> expr = fun (e1, e2) -> Times((e1, e2)) in
                                                       let buildHelper : ((Int, Int) -> Int) -> Int -> Int -> expr = fun rand -> fun max_depth -> fun curr_depth -> ? in
                                                       ?
