type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Half(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
 in
let exprToString : expr -> String = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(e) => "sin(pi*" ++ exprToString(e) ++ ")"
  | Cosine(e) => "cos(pi*" ++ exprToString(e) ++ ")"
  | Half(e) => exprToString(e) ++ "/2"
  | Neg(e) => "-" ++ exprToString(e)
  | Average(e, ex) =>
      "((" ++ exprToString(e) ++ "+" ++ exprToString(ex) ++ ")/2)"
  | Times(e, ex) => exprToString(e) ++ "*" ++ exprToString(ex)
  | Thresh(e1, e2, e3, e4) =>
      "(" ++ exprToString(e1) ++ "<" ++ exprToString(e2) ++ "?" ++ exprToString(e3) ++ ":" ++ exprToString(e4) ++ ")"
end in
?
