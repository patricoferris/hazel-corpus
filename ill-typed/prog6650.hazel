let filter = fun l -> fun a -> case l 
  | [] => []
  | h :: t => if a == h then filter(t)(a) else h :: filter(t)(a)
end in
let removeDuplicates = fun l -> let helper = fun (seen, rest) -> case rest 
  | [] => seen
  | h :: t =>
      let seen' = h in let rest' = h :: filter(t)(h) in helper((seen', rest'))
end in rev(helper(([], l))) in
let removeDuplicates = fun l -> let helper = fun (seen, rest) -> case rest 
  | [] => seen
  | h :: t =>
      let seen' = h in let rest' = h :: filter(t)(h) in helper((seen', rest'))
end in removeDuplicates(helper([])) in
?
