type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(v) => ^("sin(pi*")(^(exprToString(v))(")"))
  | Cosine(v) => ^("sin(pi*")(^(exprToString(v))(")"))
  | Average(v, w) =>
      ^("(")(^(exprToString(v))(^("+")(^(exprToString(w))(")/2"))))
  | Times(v, w) => ^(exprToString(v))(^("*")(exprToString(w)))
  | Thresh(v, w, x, y) =>
      ^(exprToString(v))(^("<")(^(exprToString(w))(^("?")(^(exprToString(x))(^(":")(exprToString(y)))))))
  | Divide(v, w) => ^(exprToString(v))(^("/")(exprToString(w)))
  | Super(v, w) =>
      ^("(")(^(exprToString(v))(^("+")(^(exprToString(w))(^(") *")(exprToString(v))))))
end in ?
