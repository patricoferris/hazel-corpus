type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString : expr -> String = fun e -> let a = exprToString in case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(t) => ^("sin(pi*")(^(e(t))(")"))
  | Cosine(t) => ^("cos(pi*")(^(e(t))(")"))
  | Average(s, t) => ^("((")(^(e(s))(^("+")(^(e(t))(")/2)"))))
  | Times(s, t) => ^(e(s))(^("*")(e(t)))
  | Thresh(s, t, u, v) =>
      ^("(")(^(e(s))(^("<")(^(e(t))(^("?")(^(e(u))(^(":")(^(e(v))(")"))))))))
  | Extra(s, t, u) =>
      ^("sin(pi*")(^(e(s))(^(") * cos (")(^(e(t))(^(") * sin(")(^(e(u))(")"))))))
  | Stuff(t) => ^("cos(pi*")(^("(sin(pi*")(^(e(t))(")))")))
end in ?
