type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
 in
let build : (((Int, Int) -> Int), Int) -> expr = fun (rand, depth) -> if depth == 0 then 
let g = rand((0, 1)) in case g 
  | 0 => VarX
  | 1 => VarY
end else let g = rand((0, 4)) in case g 
  | 0 => Sine(build((rand, depth - 1)))
  | 1 => Cosine(build((rand, depth - 1)))
  | 2 => Average((build((rand, depth - 1)), build((rand, depth - 1))))
  | 3 => Times((build((rand, depth - 1)), build((rand, depth - 1))))
  | 4 => Thresh((build((rand, depth - 1)), build((rand, depth - 1))))
end in
?
