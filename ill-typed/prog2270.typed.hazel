type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString : forall a -> expr -> [a] = typfun a -> fun e -> case e 
  | VarX => []
  | VarY => []
  | Sine(e1) => exprToString@<a>(e1)
  | Cosine(e1) => exprToString@<a>(e1)
  | Average(e1, e2) => exprToString@<a>(e1) ++ exprToString@<a>(e2)
  | Times(e1, e2) => exprToString@<a>(e1) ++ exprToString@<a>(e2)
  | Thresh(e1, e2, e3) =>
      exprToString@<a>(e1) ++ exprToString@<a>(e2) ++ exprToString@<a>(e3)
end in ?
