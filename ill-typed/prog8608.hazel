type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
  + Circ(expr, expr)
  + Oscillate(expr)
 in let pi = *.(4.)(atan(1.)) in let eval = fun (e, x, y) -> case e 
  | VarX => x
  | VarY => y
  | Sine(sine) => sin(*.(pi)(eval((sine, x, y))))
  | Cosine(cosine) => cos(*.(pi)(eval((cosine, x, y))))
  | Average(e1, e2) => /.(+.(eval((e1, x, y)))(eval((e2, x, y))))(2.)
  | Times(t1, t2) => *.(eval((t1, x, y)))(eval((t2, x, y)))
  | Thresh(th1, th2, th3, th4) =>
      if eval((th1, x, y)) < eval((th2, x, y)) then eval((th3, x, y)) else eval((th4, x, y))
  | Circ(circ1) => sqrt(abs_float(-.(1.)(eval((circ1, x, y)) ** 2.)))
  | Oscillate(m4) =>
      let x = eval((m4, x, y)) in /.(x)(sqrt(+.(-.(1.)(x) ** 2.)(x ** 2.)))
end in ?
