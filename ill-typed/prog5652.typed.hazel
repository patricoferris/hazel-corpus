type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + TimesThree(expr, expr, expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString : expr -> String = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(e) => ^("sin(pi*")(^(exprToString(e))(")"))
  | Cosine(e) => ^("cos(pi*")(^(exprToString(e))(")"))
  | TimesThree(e) =>
      ^(exprToString(e))(^("*")(^(exprToString(f))(^("*")(exprToString(f)))))
  | Average(e, f) =>
      ^("((")(^(exprToString(e))(^("+")(^(exprToString(f))(")/2)"))))
  | Times(e, f) => ^(exprToString(e))(^("*")(exprToString(f)))
  | Thresh(e, f, g, h) =>
      ^("(")(^(exprToString(e))(^("<")(^(exprToString(f))(^("?")(^(exprToString(g))(^(":")(^(exprToString(h))(")"))))))))
end in ?
