type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
 in
let exprToString = fun e -> case e 
  | VarX => "x"
  | VaryY => "y"
  | Sine(ex) => "sin(pi*" ++ exprToString(ex) ++ ")"
  | Cosine(ex) => "cos(pi*" ++ exprToString(ex) ++ ")"
  | Average(ex1, ex2) =>
      "(" ++ exprToString(ex1) ++ "*" ++ exprToString(ex2) ++ ")/2"
  | Times(ex1, ex2) => exprToString(ex1) ++ "*" ++ exprToString(ex2)
  | Thresh(ex1, ex2, ex3, ex4) =>
      "(" ++ exprToString(ex1) ++ "<" ++ exprToString(ex2) ++ "?" ++ exprToString(ex3) ++ ":" ++ exprToString(ex4) ++ ")"
end in
?
