type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Square(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Square(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + MyExp(expr, expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(m) => "sin(pi*" ++ exprToString(m) ++ ")"
  | Cosine(m) => "cos(pi*" ++ exprToString(m) ++ ")"
  | Square(m) => "(" ++ exprToString(m) ++ "^2)"
  | Average(m, n) =>
      "((" ++ exprToString(m) ++ "+" ++ exprToString(n) ++ ")/2)"
  | Times(m, n) => exprToString(m) ++ "*" ++ exprToString(n)
  | Thresh(m, n, o, p) =>
      "(" ++ exprToString(m) ++ "<" ++ exprToString(n) ++ "?" ++ exprToString(o) ++ ":" ++ exprToString(p) ++ ")"
end in let _ = exprToString(MyExpr((VarX, VarY, VarX))) in ?
