type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString : forall a -> [expr] -> [a] = typfun a -> fun e -> case e 
  | [] => []
  | h :: e' => case h 
  | VarX => "x" ++ exprToString@<a>(e')
  | VarY => "y" ++ exprToString@<a>(e')
  | Sine => "sin(pi*" ++ exprToString@<a>(e') ++ ")"
  | Cosine => "cos(pi*" ++ exprToString@<a>(e') ++ ")"
  | Average =>
      let (e1, e2) = h in "((" ++ exprToString@<a>(e1) ++ "+" ++ exprToString@<a>(e2) ++ ")/2)" ++ exprToString@<a>(e')
  | Times =>
      let (e1, e2) = h in exprToString@<a>(e1) ++ "*" ++ exprToString@<a>(e2) ++ exprToString@<a>(e')
  | Thresh =>
      let (e1, e2, e3, e4) = h in "(" ++ exprToString@<a>(e1) ++ "<" ++ exprToString@<a>(e2) ++ "?" ++ exprToString@<a>(e3) ++ ":" ++ exprToString@<a>(e4) ++ ")" ++ exprToString@<a>(e')
end
end in ?
