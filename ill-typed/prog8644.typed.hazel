type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Square(expr)
  + Hoi(expr, expr, expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString : expr -> String = fun e -> let exp = exprToString in case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(a) => ^("sin(pi*")(^(exp(a))(")"))
  | Cosine(a) => ^("cos(pi*")(^(exp(a))(")"))
  | Boo(a) => ^("((")(^(exp(a))(^("+")(^(exp(a))(")/100)"))))
  | Average(a, b) => ^("((")(^(exp(a))(^("+")(^(exp(b))(")/2)"))))
  | Times(a, b) => ^(exp(a))(^("*")(exp(b)))
  | Thresh(a, b, c, d) =>
      ^("(")(^(exp(a))(^("<")(^(exp(b))(^("?")(^(exp(c))(^(":")(^(exp(d))(")"))))))))
  | Hoi(a, b, c) =>
      ^("sin(pi*")(^(exp(a))(^(")*cos(pi*")(^(exp(b))(^(")/(")(^(exp(c))(")"))))))
end in ?
