type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(s) => ^("sin(pi*")(^(exprToString(s))(")"))
  | Cosine(s) => ^("cos(pi*")(^(exprToString(s))(")"))
  | Average(s, p) =>
      ^("((")(^(exprToString(s))(^("+")(^(exprToString(p))(")/2"))))
  | Times(s, p) => ^(exprToString(s))(^("*")(exprToString(p)))
  | Thresh(s, p, r, d) =>
      ^("(")(^(exprToString(s))(^("<")(^(exprToString(p))(^("?")(^(exprToString(r))(^(":")(^(exprToString(d))(")"))))))))
  | AllMult(s, p, r) =>
      ^(exprToString(s))(^("*")(^(exprToString(p))(^("*")(exprToString(p)))))
  | AvgThree(s, p, r) =>
      ^("((")(^(exprToString(s))(^("+")(^(exprToString(p))(^("+")(^(exprToString(p))(")/2"))))))
end in ?
