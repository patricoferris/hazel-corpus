type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(sine) => "sin(pi*" ++ exprToString(sine) ++ ")"
  | Cosine(cosine) => "cos(pi*" ++ exprToString(cosine) ++ ")"
  | Average(e1, e2) =>
      "((" ++ exprToString(e1) ++ "+" ++ exprToString(e2) ++ ")/2)"
  | Times(t1, t2) => exprToString(t1) ++ "*" ++ exprToString(t2)
  | Thresh(th1, th2, th3, th4) =>
      "(" ++ exprToString(th1) ++ "<" ++ exprToString(th2) ++ "?" ++ exprToString(th3) ++ ":" ++ exprToString(th4) ++ ")"
  | Circ(circ1, circ2) =>
      "(" ++ exprToString(circ1) ++ "^2+" ++ exprToString(circ2) ++ ")"
  | NatLog(nlog) => "ln(" ++ nlog ++ ")"
end in ?
