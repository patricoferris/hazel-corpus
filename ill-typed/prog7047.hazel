type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(x) => ^("sin(pi*")(^(exprToString(x))(")"))
  | Cosine(x) => ^("cos(pi*")(^(exprToString(x))(")"))
  | Average(x, y) =>
      ^("((")(^(exprToString(x))(^("+")(^(exprToString(y))(")/2)"))))
  | Times(x, y) => ^(exprToString(x))(^("*")(exprToString(y)))
  | Thresh(x, y, z, s) =>
      ^("(")(^(exprToString(x))(^("<")(^(exprToString(y))(^("?")(^(exprToString(z))(^(":")(^(exprToString(s))(")"))))))))
  | Trip(x, y, z) =>
      ^("((")(^(exprToString(x))(^("%30.0)")(^(exprToString)(^("%")(^(exprToString(z))(")"))))))
end in ?
