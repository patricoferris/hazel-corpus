type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString : expr -> String = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(a) => "sin(pi*" ++ exprToString(a) ++ ")"
  | Cosine(a) => "cos(pi*" ++ exprToString(a) ++ ")"
  | Average(a, b) =>
      "((" ++ exprToString(a) ++ "+" ++ exprToString(b) ++ ")/2)"
  | Times(a, b) => exprToString(a) ++ "*" ++ exprToString(b)
  | Thresh(a, b, c, d) =>
      "(" ++ exprToString(a) ++ "<" ++ exprToString(b) ++ "?" ++ exprToString(c) ++ ":" ++ exprToString(d) ++ ")"
  | SquareAv(a, b) =>
      "(" ++ exprToString(a) ++ "^2 + " ++ exprToString(b) ++ "^2)/2"
  | MultHalf(a, b, c) =>
      "(" ++ exprToString(a) ++ "*" ++ exprToString(b) ++ "*" ++ exprToString(c) ++ ")/2"
end in ?
