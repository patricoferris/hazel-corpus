type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
  + Power((expr, expr))
  + Op((expr, expr, expr))
 in
type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
  + Sqrt(expr)
  + Op((expr, expr, expr))
 in
let exprToString = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(n) => "sin(pi*" ++ exprToString(n) ++ ")"
  | Cosine(n) => "cos(pi*" ++ exprToString(n) ++ ")"
  | Average(x, y) =>
      "((" ++ exprToString(x) ++ "+" ++ exprToString(y) ++ ")/2)"
  | Times(x, y) => exprToString(x) ++ "*" ++ exprToString(y)
  | Thresh(x, y, z, w) =>
      "(" ++ exprToString(x) ++ "<" ++ exprToString(y) ++ "?" ++ exprToString(z) ++ ":" ++ exprToString(w) ++ ")"
  | Sqrt(x) => "sqrt(" ++ exprToString(x) ++ ")"
  | Op(x, y, z) =>
      "(" ++ exprToString(x) ++ "*" ++ exprToString(y) ++ "*" ++ exprToString(z) ++ ")/(" ++ exprToString(x) ++ "+" ++ exprToString(y) ++ "+" ++ exprToString(z) ++ ")"
end in
let _ = exprToString(Power((VarX, VarY))) in ?
