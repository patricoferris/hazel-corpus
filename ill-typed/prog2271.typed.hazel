type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString : expr -> expr = fun e -> case e 
  | VarX => VarX
  | VarY => VarY
  | Sine(e1) => exprToString(e1)
  | Cosine(e1) => exprToString(e1)
  | Average(e1, e2) => ^(exprToString(e1))(exprToString(e2))
  | Times(e1, e2) => ^(exprToString(e1))(exprToString(e2))
  | Thresh(e1, e2, e3) =>
      ^(exprToString(e1))(^(exprToString(e2))(exprToString(e3)))
end in ?
