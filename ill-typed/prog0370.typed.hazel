type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
  + SquareRoot(expr)
  + FunckyCube(expr, expr, expr)
 in type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
  + SquareRoot(expr)
  + FunckyRoot(expr, expr, expr)
 in let exprToString : expr -> String = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(e') => ^("sin(pi*")(^(exprToString(e'))(")"))
  | Cosine(e') => ^("cos(pi*")(^(exprToString(e'))(")"))
  | Average(e1, e2) =>
      ^("((")(^(exprToString(e1))(^("+")(^(exprToString(e2))("/2)"))))
  | Times(e1, e2) => ^(exprToString(e1))(^("*")(exprToString(e2)))
  | Thresh(e1, e2, e3, e4) =>
      ^("(")(^(exprToString(e1))(^("<")(^(exprToString(e2))(^("?")(^(exprToString(e3))(^(":")(^(exprToString(e4))(")"))))))))
  | SquareRoot(e') => ^("sqrt(")(^(exprToString(e'))(")"))
  | FunckyCube(e1, e2, e3) =>
      ^("sqrt(sqrt(")(^(exprToString(e1))(^(")+sqrt(")(^(exprToString(e2))(^(")+sqrt(")(^(exprToString(e3))("))"))))))
end in ?
