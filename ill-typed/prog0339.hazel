type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
 in
let exprToString = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sin(e') => "sin (pi*" ++ expr(e') ++ ")"
  | Cos(e') => "cos (pi*" ++ expr(e') ++ ")"
  | (Average(e1), e2) =>
      "((" ++ esprToString(e1) ++ " + " ++ exprToString(e2) ++ "/2)"
  | (Times(e1), e2) => exprToString(e1) ++ " * " ++ exprToString(e2)
  | (Thresh(e1), e2, e3, e4) =>
      "(" ++ exprToString(e1) ++ "<" ++ exprToString(e2) ++ " ? " ++ exprToString(e3) ++ " : " ++ exprToString(e4) ++ ")"
end in
?
