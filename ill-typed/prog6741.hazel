type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
  + Expn((expr, expr))
  + TripMult((expr, expr, expr))
 in
let exprToString = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(b) => "sin(pi*" ++ exprToString(b) ++ ")"
  | Cosine(b) => "cos(pi*" ++ exprToString(b) ++ ")"
  | Average(a, b) =>
      "((" ++ exprToString(a) ++ "+" ++ exprToString(b) ++ ")/2)"
  | Times(a, b) => exprToString(a) ++ "*" ++ exprToString(b)
  | Thresh(a, b, c, d) =>
      "(" ++ exprToString(a) ++ "<" ++ exprToString(b) ++ "?" ++ exprToString(c) ++ ":" ++ exprToString(d) ++ ")"
  | Expn(b) => "(0.5^" ++ exprToString(b) ++ ")"
  | TripMult(a, b, c) =>
      "(" ++ exprToString(a) ++ "*" ++ exprToString(b) ++ "*" ++ exprToString(c) ++ ")"
  | _ => ""
end in
?
