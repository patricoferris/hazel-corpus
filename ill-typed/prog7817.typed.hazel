type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
  + Squares((expr, expr))
  + Volume((expr, expr, expr))
 in
let exprToString : expr -> String = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(e) => "sin(pi*" ++ exprToString(e) ++ ")"
  | Cosine(e) => "cos(pi*" ++ exprToString(e) ++ ")"
  | Average(x, y) =>
      "((" ++ exprToString(y) ++ "+" ++ exprToString(y) ++ ")/2)"
  | Times(x, y) => exprToString(x) ++ "*" ++ exprToString(y)
  | Thresh(w, x, y, z) =>
      "(" ++ exprToString(w) ++ "<" ++ exprToString(x) ++ "?" ++ exprToString(y) ++ ":" ++ exprToString(z)
  | Squares(e) => exprToString(e) ++ "*" ++ exprToString(e)
  | Volume(l, w, h) =>
      "(" ++ exprToString(e) ++ "*(" ++ exprToString(e) ++ ")*" ++ exprToString(e) ++ ")"
end in
?
