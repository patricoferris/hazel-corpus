let digitsOfInt = fun n -> if n <= 0 then [] else if int_mod((n, 10)) == 0 then 0 :: digitsOfInt(n / 10) else if int_mod((n - 1, 10)) == 0 then 1 :: digitsOfInt(n - 1 / 10) else if int_mod((n - 2, 10)) == 0 then 2 :: digitsOfInt(n - 2 / 10) else if int_mod((n - 3, 10)) == 0 then 3 :: digitsOfInt(n - 3 / 10) else if int_mod((n - 4, 10)) == 0 then 4 :: digitsOfInt(n - 4 / 10) else if int_mod((n - 5, 10)) == 0 then 5 :: digitsOfInt(n - 5 / 10) else if int_mod((n - 6, 10)) == 0 then 6 :: digitsOfInt(n - 6 / 10) else if int_mod((n - 7, 10)) == 0 then 7 :: digitsOfInt(n - 7 / 10) else if int_mod((n - 8, 10)) == 0 then 8 :: digitsOfInt(n - 8 / 10) else ? in
?
