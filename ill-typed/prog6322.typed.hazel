type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
  + Sqrt(expr)
 in type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let exprToString : expr -> String = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(rest) => ^("sin(pi*")(^(exprToString(rest))(")"))
  | Cosine(rest) => ^("cos(pi*")(^(exprToString(rest))(")"))
  | Average(expr1, expr2) =>
      ^("(")(^(exprToString(expr1))(^("+")(^(exprToString(expr2))("/2)"))))
  | Times(expr1, expr2) =>
      ^(exprToString(expr1))(^("*")(exprToString(expr2)))
  | Thresh(e1, e2, e3, e4) =>
      ^("(")(^(exprToString(e1))(^("<")(^(exprToString(e2))(^("?")(^(exprToString(e3))(^(":")(^(exprToString(e4))(")"))))))))
  | Sqrt(e1) => ^("sqrt(")(^(exprToString(e1))(")"))
end in ?
