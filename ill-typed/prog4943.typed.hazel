type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
  + Square(expr)
  + Volume((expr, expr, expr))
 in
type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
  + Sqaure(expr)
  + Volume((expr, expr, expr))
 in
let pi : Float = 4. *. atan(1.) in let eval : (expr, Float, Float) -> Float = fun (e, x, y) -> case e 
  | VarX => x
  | VarY => y
  | Sine(a) => sin(pi *. eval((a, x, y)))
  | Cosine(a) => cos(pi *. eval((a, x, y)))
  | Average(a, b) => eval((a, x, y)) +. eval((b, x, y)) /. 2.
  | Times(a, b) => eval((a, x, y)) *. eval((b, x, y))
  | Thresh(a, b, c, d) =>
      if eval((a, x, y)) < eval((b, x, y)) then eval((c, x, y)) else eval((d, x, y))
  | Square(a) => eval((a, x, y)) *. eval((a, x, y))
  | Volume(vol_1, vol_2, vol_3) =>
      eval((vol_1, x, y)) *. eval((vol_2, x, y)) *. eval((vol_3, x, y))
end in
?
