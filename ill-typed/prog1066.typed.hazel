type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
 in let buildCosine : expr -> expr = fun e -> Cosine(e) in let eval : forall a -> forall b -> ? -> a -> b = typfun a -> typfun b -> fun (e, x, y) -> let evalhelper = fun e -> fun x -> fun y -> case e 
  | VarX => x
  | VarY => y
  | Sine(p1) => evalhelper(Sine)(p1)(x)(y)
  | Cosine(p1) => evalhelper(buildCosine)(p1)(x)(y)
end in evalhelper(e)(x)(y) in ?
