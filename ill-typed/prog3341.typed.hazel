type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average(expr, expr)
  + Times(expr, expr)
  + Thresh(expr, expr, expr, expr)
  + AbsThresh(expr, expr, expr)
  + ModThresh(expr, expr, expr)
 in let exprToString : expr -> String = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(e1) => "sin(pi*" ++ exprToString(e1) ++ ")"
  | Cosine(e1) => "cos(pi*" ++ exprToString(e1) ++ ")"
  | Average(e1, e2) =>
      "((" ++ exprToString(e1) ++ "+" ++ exprToString(e2) ++ ")/2)"
  | Times(e1, e2) => exprToString(e1) ++ "*" ++ exprToString(e2)
  | Thresh(e1, e2, e3, e4) =>
      "(" ++ exprToString(e1) ++ "<" ++ exprToString(e2) ++ "?" ++ exprToString(e3) ++ ":" ++ exprToString(e4) ++ ")"
  | AbsTresh(e1, e2, e3) =>
      let s = exprToString(e3) in "(abs(" ++ exprToString(e1) ++ ")<abs(" ++ exprToString(e2) ++ "?" ++ s ++ ":abs(" ++ exprToString(e4) ++ "))"
end in ?
