type expr = 
  + VarX
  + VarY
  + Sine(expr)
  + Cosine(expr)
  + Average((expr, expr))
  + Times((expr, expr))
  + Thresh((expr, expr, expr, expr))
  + Plus((expr, expr))
  + Cube((expr, expr, expr))
 in
let exprToString : expr -> String = fun e -> case e 
  | VarX => "x"
  | VarY => "y"
  | Sine(v) => "sin(pi*" ++ exprToString(v) ++ ")"
  | Cosine(v) => "cos(pi*" ++ exprToString(v) ++ ")"
  | Average(v, w) =>
      "((" ++ exprToString(v) ++ "+" ++ exprToString(w) ++ ")/2)"
  | Times(v, w) => exprToString(v) ++ "*" ++ exprToString(w)
  | Thresh(v, w, x, y) =>
      exprToString(v) ++ "<" ++ exprToString(w) ++ "?" ++ exprToString(x) ++ ":" ++ exprToString(y) ++ ")"
  | Plus(v) => "(" ++ exprToString(v) ++ "+"(exprToString)(w) ++ ")"
  | Cube(v, w, x) =>
      "(" ++ exprToString(v) ++ "*" ++ exprToString(w) ++ "*" ++ exprToString(x)
end in
?
