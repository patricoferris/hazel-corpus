let lastListElement : forall a -> [a] -> a = typfun a -> fun n -> case n 
  | [] => failwith("ERROR: List must be of size 1 or greater")
  | [x] => x
  | x :: y => lastListElement@<a>(y)
end in let catLists : Bool -> [Bool] -> [Bool] = fun x -> fun y -> if not(x) == [] then case x 
  | [x] => x :: y
  | h :: t => catLists(t)(lastListElement@<a>(x) :: y)
end else if x == [] then y else ? in ?
